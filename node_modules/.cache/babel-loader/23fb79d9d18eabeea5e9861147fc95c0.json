{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport cityPosition from '@/assets/map/cityPosition.json';\nimport { getDataJson, pollingRefresh } from '@/utils';\nexport default {\n  name: 'MapMigrate',\n  props: {\n    cptId: String,\n    width: Number,\n    height: Number,\n    configProps: Object\n  },\n  data() {\n    return {\n      uuid: '',\n      cptData: {},\n      chartOption: {},\n      chart: undefined\n    };\n  },\n  watch: {\n    'configProps.attribute': {\n      handler(newObj) {\n        this.loadChart(newObj);\n      },\n      deep: true // 深度监听\n    },\n\n    width() {\n      this.chart.resize();\n    },\n    height() {\n      this.chart.resize();\n    }\n  },\n  created() {\n    this.uuid = require('uuid').v1();\n  },\n  mounted() {\n    this.chart = this.$echarts.init(document.getElementById(this.uuid));\n    this.refreshCptData();\n  },\n  methods: {\n    refreshCptData() {\n      pollingRefresh(this.uuid, this.configProps.cptDataForm, this.loadData);\n    },\n    loadData() {\n      getDataJson(this.configProps.cptDataForm, this.cptId).then(res => {\n        this.cptData = res;\n        this.loadChart(this.configProps.attribute);\n      });\n    },\n    loadChart(attribute) {\n      const that = this;\n      const planePath = 'path://M1705.06,1318.313v-89.254l-319.9-221.799l0.073-208.063c0.521-84.662-26.629-121.796-63.961-121.491c-37.332-0.305-64.482,36.829-63.961,121.491l0.073,208.063l-319.9,221.799v89.254l330.343-157.288l12.238,241.308l-134.449,92.931l0.531,42.034l175.125-42.917l175.125,42.917l0.531-42.034l-134.449-92.931l12.238-241.308L1705.06,1318.313z';\n      const convertData = function (toData) {\n        const res = [];\n        toData.forEach(item => {\n          const toPosition = cityPosition[item.name];\n          if (toPosition) {\n            res.push([that.cptData.start, toPosition]);\n          }\n        });\n        return res;\n      };\n      const seaData = function (toData) {\n        const res = [];\n        toData.forEach(item => {\n          const value = cityPosition[item.name].concat(item.value);\n          res.push({\n            name: item.name,\n            value: value\n          });\n        });\n        return res;\n      };\n      that.chartOption = {\n        title: {\n          text: attribute.titleText,\n          subtext: attribute.subtext,\n          left: attribute.titleLeft,\n          top: attribute.titleTop,\n          textStyle: {\n            color: attribute.titleColor,\n            fontSize: attribute.titleFontSize\n          },\n          subtextStyle: {\n            color: attribute.subTitleColor,\n            fontSize: attribute.subTitleFontSize\n          }\n        },\n        tooltip: {\n          trigger: 'item'\n        },\n        geo: {\n          map: 'china',\n          label: {\n            show: true,\n            color: '#aaa'\n          },\n          zoom: 1.23,\n          // 允许缩放\n          roam: attribute.roam,\n          itemStyle: {\n            areaColor: '#323c48',\n            borderColor: '#404a59'\n          }\n        },\n        series: [{\n          name: attribute.seriesName,\n          type: 'lines',\n          zlevel: 1,\n          // 特效\n          effect: {\n            // 特效图形标记\n            // 'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'\n            symbol: attribute.symbol,\n            // 显示与否\n            show: true,\n            // 延迟\n            delay: 1000,\n            // 特效时间 越短速度越快\n            period: attribute.period,\n            // 拖尾\n            trailLength: 0.1,\n            // 颜色\n            color: attribute.effectColor,\n            loop: attribute.effectLoop,\n            // 大小\n            symbolSize: attribute.symbolSize\n          },\n          lineStyle: {\n            color: attribute.seriesColor,\n            width: attribute.lineWidth,\n            // 边的曲度 0-1 数值大，弯曲越大\n            curveness: attribute.curveness\n          },\n          data: convertData(this.cptData.end)\n        }, {\n          name: attribute.seriesName,\n          type: 'lines',\n          zlevel: 2,\n          effect: {\n            show: true,\n            period: 6,\n            trailLength: 0,\n            symbol: planePath,\n            symbolSize: 15\n          },\n          lineStyle: {\n            color: attribute.seriesColor,\n            width: 1,\n            opacity: 0.4,\n            curveness: 0.2\n          },\n          data: convertData(this.cptData.end)\n        }, {\n          name: attribute.seriesName,\n          type: 'effectScatter',\n          coordinateSystem: 'geo',\n          zlevel: 2,\n          rippleEffect: {\n            brushType: 'stroke'\n          },\n          label: {\n            show: true,\n            position: 'right',\n            formatter: '{b}'\n          },\n          symbolSize: function (val) {\n            return val[2] / 8;\n          },\n          itemStyle: {\n            color: attribute.seriesColor\n          },\n          data: seaData(this.cptData.end)\n        }]\n      };\n      that.chart.setOption(that.chartOption);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}