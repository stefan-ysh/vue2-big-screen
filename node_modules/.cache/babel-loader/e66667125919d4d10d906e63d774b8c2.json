{"ast":null,"code":"import { Base64 } from 'js-base64';\nexport default {\n  name: 'PreviewIndex',\n  data() {\n    return {\n      windowWidth: 0,\n      windowHeight: 0,\n      conHeight: 0,\n      containerScale: []\n    };\n  },\n  computed: {\n    cptRefs() {\n      return this.$store.state.bigScreen.cptRefs;\n    },\n    designCache() {\n      return this.$store.state.bigScreen.viewData;\n    }\n  },\n  beforeMount() {\n    this.loadData();\n    this.$store.commit('bigScreen/CLEAR_BIG_SCREEN_CPT_REF');\n    window.removeEventListener('resize', this.loadSize);\n  },\n  mounted() {\n    window.addEventListener('resize', this.loadSize);\n  },\n  methods: {\n    convertAnimation(animation) {\n      if (animation) {\n        const {\n          name,\n          speed,\n          repeat,\n          delay\n        } = animation;\n        return `animate__animated animate__${name} ${speed} ${repeat} ${delay}`;\n      }\n    },\n    convertStyle(type, item) {\n      switch (type) {\n        case 'bg':\n          return {\n            'background-size': this.designCache.previewScaleType === 'fit' ? 'contain' : '',\n            'background-repeat': this.designCache.previewScaleType === 'fit' ? 'no-repeat' : '',\n            'background-position': this.designCache.previewScaleType === 'fit' ? 'top' : '',\n            width: this.windowWidth + 'px',\n            height: this.conHeight + 'px',\n            backgroundColor: this.designCache.bgColor,\n            backgroundImage: this.designCache.bgImg ? 'url(' + this.designCache.bgImg + ')' : 'none'\n          };\n        case 'wrap':\n          return {\n            width: this.windowWidth + 'px',\n            height: this.conHeight + 'px',\n            transform: 'scale(' + this.containerScale.join(',') + ')'\n          };\n        case 'cpt':\n          return {\n            width: Math.round(item.cptWidth) + 'px',\n            height: Math.round(item.cptHeight) + 'px',\n            top: Math.round(item.cptY) + 'px',\n            left: Math.round(item.cptX) + 'px',\n            zIndex: item.cptZ,\n            opacity: item.opacity,\n            transform: `rotateX(${item.rotateX}deg) rotateY(${item.rotateY}deg) rotateZ(${item.rotateZ}deg)`,\n            visibility: !item.hidden ? '' : 'hidden'\n          };\n        default:\n          break;\n      }\n    },\n    // 刷新部分数据\n    refreshCpt(ids) {\n      ids.forEach(id => {\n        this.cptRefs.get(id).refreshCptData();\n      });\n    },\n    // 刷新所有组件数据\n    refreshAllCpts() {\n      this.cptRefs.forEach((k, v) => {\n        k.refreshCptData && k.refreshCptData();\n      });\n    },\n    // 加载数据\n    async loadData() {\n      const cacheData = localStorage.getItem('viewData');\n      const bigscreenData = JSON.parse(Base64.decode(cacheData));\n      // 显示器标题\n      document.title = bigscreenData.title;\n      // 渲染数据赋值\n      this.$store.dispatch('bigScreen/initViewBigScreenData', bigscreenData);\n      this.loadSize();\n      // 将组件需要的接口参数存储起来\n      this.designCache.components.forEach(cpt => {\n        const id = cpt.id;\n        if (cpt.configProps.cptDataForm) {\n          // if (!cpt.configProps.cptDataForm.reqParams) {\n          //   console.warn(cpt.layerName + '未设置参数')\n          //   return\n          // }\n          const params = JSON.parse(cpt.configProps.cptDataForm.reqParams || '{}');\n          this.$store.dispatch('bigScreen/changeReqParams', {\n            id,\n            params\n          });\n        }\n        this.$nextTick(() => {\n          // 全局注册组件引用\n          const ref = this.$refs[id][0];\n          this.$store.commit('bigScreen/ADD_BIG_SCREEN_CPT_REF', {\n            id,\n            ref\n          });\n        });\n      });\n    },\n    // 加载窗口\n    loadSize() {\n      this.windowWidth = this.width || document.documentElement.clientWidth;\n      this.windowHeight = document.documentElement.clientHeight;\n      switch (this.designCache.previewScaleType) {\n        case 'fill':\n          // 拉伸填充\n          this.containerScale = [Math.round(this.windowWidth / this.designCache.screenWidth * 100) / 100, Math.round(this.windowHeight / this.designCache.screenHeight * 100) / 100];\n          this.conHeight = this.designCache.screenHeight * this.containerScale[1];\n          break;\n        case 'scrollY':\n          // y 滚动\n          this.containerScale = [Math.round(this.windowWidth / this.designCache.screenWidth * 100) / 100];\n          this.conHeight = this.designCache.screenHeight * this.containerScale[0];\n          break;\n        case 'scrollX':\n          // x 滚动\n          this.containerScale = [Math.round(this.windowHeight / this.designCache.screenHeight * 100) / 100];\n          this.windowWidth = this.designCache.screenWidth * this.containerScale[0];\n          this.conHeight = this.designCache.screenHeight * this.containerScale[0];\n          break;\n        // todo 按照比例自适应\n        // case \"fit\":\n        //   const arr = [Math.round(\n        //       (this.windowWidth / this.designCache.screenWidth) * 100\n        //     ) / 100,Math.round(\n        //       (this.windowHeight / this.designCache.screenHeight) * 100\n        //     ) / 100]\n        //     const max = Math.min(...arr)\n        //   this.containerScale = [max,max];\n        //   this.conHeight = this.windowHeight\n        //   break;\n        default:\n          this.containerScale = [Math.round(this.windowWidth / this.designCache.screenWidth * 100) / 100];\n          this.conHeight = this.designCache.screenHeight;\n          break;\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}