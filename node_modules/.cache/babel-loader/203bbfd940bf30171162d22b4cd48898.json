{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getDataJson, pollingRefresh } from '@/utils';\nexport default {\n  name: 'PloygonRadarChart',\n  props: {\n    cptId: {\n      type: String,\n      default: ''\n    },\n    width: Number,\n    height: Number,\n    configProps: {\n      type: Object,\n      default: () => {}\n    }\n  },\n  data() {\n    return {\n      uuid: '',\n      chartOption: {},\n      chart: undefined,\n      cptData: []\n    };\n  },\n  watch: {\n    'configProps.attribute': {\n      handler(newObj) {\n        this.loadChart(newObj);\n      },\n      deep: true // 深度监听\n    },\n\n    width() {\n      this.chart.resize();\n    },\n    height() {\n      this.chart.resize();\n    }\n  },\n  created() {\n    this.uuid = require('uuid').v1();\n  },\n  mounted() {\n    this.chart = this.$echarts.init(document.getElementById(this.uuid));\n    this.refreshCptData();\n  },\n  methods: {\n    refreshCptData() {\n      pollingRefresh(this.uuid, this.configProps.cptDataForm, this.loadData);\n    },\n    loadData() {\n      getDataJson(this.configProps.cptDataForm, this.cptId).then(res => {\n        this.cptData = res;\n        this.loadChart(this.configProps.attribute);\n      });\n    },\n    loadChart(attribute) {\n      let indicator = [];\n      // 静态指示器内容\n      if (attribute.staticIndicator) {\n        indicator = JSON.parse(attribute.indicator);\n      } else {\n        // 接口数据读取指示器内容\n        indicator = this.cptData.indicator;\n      }\n      const series = [];\n      const legendTitle = [];\n      this.cptData.value.forEach((c, i) => {\n        legendTitle.push(c.name);\n        series.push({\n          name: c.name,\n          type: 'radar',\n          // 范围线和圆点\n          itemStyle: {\n            // 圆点/边框颜色\n            color: attribute.pieColor[i],\n            // 圆点边框颜色\n            borderColor: attribute.pieColor[i]\n            // 圆点边框类型\n            // borderType: 'dashed'\n          },\n\n          // 覆盖区域\n          areaStyle: {\n            color: attribute.pieColor[i],\n            opacity: attribute.areaOpacity\n          },\n          data: [{\n            name: attribute.chartTitle,\n            value: c.data\n          }]\n        });\n      });\n      this.chartOption = {\n        title: {\n          show: attribute.titleVisible,\n          text: attribute.chartTitle,\n          left: attribute.titleX,\n          top: attribute.titleY,\n          subtext: attribute.subtext,\n          textStyle: {\n            fontSize: attribute.titleFontSize,\n            color: attribute.titleTextColor\n          },\n          // 副标题文本样式设置\n          subtextStyle: {\n            fontSize: attribute.subTitleFontSize,\n            color: attribute.subTitleColor\n          }\n        },\n        legend: {\n          show: attribute.legendVisible,\n          data: legendTitle\n        },\n        tooltip: {\n          trigger: 'item',\n          confine: true,\n          appendToBody: true\n        },\n        radar: {\n          shape: 'ploygon',\n          indicator,\n          // 设置雷达图中间射线的颜色\n          axisLine: {\n            lineStyle: {\n              color: attribute.axisLineColor\n            }\n          },\n          axisLabel: {\n            show: attribute.axisLabelVisible\n            // showMiniLabel: true,\n            // showMaxLabel: true\n          },\n\n          // 雷达图网格背景的颜色，完全不透明度为0(透明背景)\n          splitArea: {\n            show: true,\n            areaStyle: {\n              // 图表背景的颜色\n              color: attribute.splitAreaColor\n            }\n          },\n          splitLine: {\n            show: true,\n            lineStyle: {\n              width: 1,\n              // 设置网格的颜色\n              color: attribute.splitLineColor\n            }\n          },\n          splitNumber: attribute.splitNumber,\n          axisNameGap: attribute.nameGap,\n          radius: [attribute.radiusInside + '%', attribute.radiusOutside + '%'],\n          // 坐标名字\n          axisName: {\n            show: attribute.axisNameVisible,\n            fontSize: attribute.axisNameFontSize,\n            color: attribute.axisNameColor\n          }\n        },\n        series\n      };\n      // 图表处理\n      if (this.configProps.cptDataForm.convertChart) {\n        const funcStr = this.configProps.cptDataForm.convertChart;\n        const convertFun = new Function('return ' + funcStr);\n        convertFun()(this.chartOption);\n      }\n      this.chart.setOption(this.chartOption);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}