{"ast":null,"code":"import { getDataJson, pollingRefresh } from '@/utils';\nexport default {\n  name: 'BarChart',\n  props: {\n    width: Number,\n    height: Number,\n    configProps: Object,\n    cptId: String\n  },\n  data() {\n    return {\n      uuid: null,\n      chartOption: {},\n      chart: undefined,\n      cptData: {}\n    };\n  },\n  watch: {\n    'configProps.attribute': {\n      handler(newObj) {\n        this.loadChart(newObj);\n      },\n      deep: true\n    },\n    width() {\n      this.chart.resize();\n    },\n    height() {\n      this.chart.resize();\n    }\n  },\n  created() {\n    this.uuid = require('uuid').v1();\n  },\n  mounted() {\n    this.chart = this.$echarts.init(document.getElementById(this.uuid));\n    this.refreshCptData();\n    this.chart.on('click', params => {\n      // debugger\n    });\n  },\n  methods: {\n    refreshCptData() {\n      pollingRefresh(this.uuid, this.configProps.cptDataForm, this.loadData);\n    },\n    loadData() {\n      getDataJson(this.configProps.cptDataForm, this.cptId).then(res => {\n        this.cptData = res;\n        this.loadChart(this.configProps.attribute);\n      });\n    },\n    loadChart(attribute) {\n      const that = this;\n      let columnColor = attribute.barColor;\n      if (attribute.gradualColor) {\n        columnColor = new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n          offset: 0,\n          color: attribute.barColor1\n        }, {\n          offset: 0.5,\n          color: attribute.barColor2\n        }, {\n          offset: 1,\n          color: attribute.barColor3\n        }]);\n      }\n      that.chartOption = {\n        backgroundColor: attribute.backgroundColor,\n        color: columnColor,\n        title: {\n          text: attribute.chartTitle,\n          textStyle: {\n            color: attribute.titleTextColor\n          },\n          left: attribute.titleLeft,\n          top: attribute.titleTop\n        },\n        tooltip: {\n          trigger: 'axis',\n          // 坐标轴指示器，坐标轴触发有效\n          axisPointer: {\n            // 默认为直线，可选为：'line' | 'shadow'\n            type: 'shadow'\n          }\n        },\n        grid: {\n          x: 10,\n          y: 30,\n          x2: 10,\n          y2: 10,\n          containLabel: true\n        },\n        xAxis: {\n          show: attribute.xAxisShow,\n          type: attribute.barDirection === 'horizontal' ? 'value' : 'category',\n          data: this.cptData.xData.split(','),\n          axisLabel: {\n            color: attribute.xLabelColor,\n            rotate: attribute.xFontRotate,\n            fontSize: 50\n          },\n          axisLine: {\n            show: attribute.xLineShow,\n            lineStyle: {\n              color: attribute.xLineColor\n            }\n          },\n          // x轴刻度线\n          axisTick: {\n            show: attribute.xTickShow\n          }\n        },\n        yAxis: {\n          show: attribute.yAxisShow,\n          type: attribute.barDirection === 'vertical' ? 'value' : 'category',\n          axisLabel: {\n            color: attribute.yLabelColor\n          },\n          axisLine: {\n            show: attribute.yLineShow,\n            lineStyle: {\n              color: attribute.yLineColor\n            }\n          },\n          // y轴刻度线\n          axisTick: {\n            show: attribute.yTickShow\n          },\n          // 网格线\n          splitLine: {\n            show: attribute.yGridLineShow\n          }\n        },\n        series: [{\n          data: this.cptData.yData.split(','),\n          type: attribute.barType,\n          // pictorialBar || bar\n          showBackground: attribute.barBgShow,\n          symbol: attribute.barPath,\n          backgroundStyle: {\n            color: attribute.barBgColor\n          },\n          barWidth: attribute.barWidth,\n          itemStyle: {\n            borderRadius: attribute.barBorderRadius\n          },\n          label: {\n            // 开启显示\n            show: attribute.barLabelShow,\n            position: 'top',\n            color: attribute.barLabelColor,\n            fontSize: attribute.barLabelSize\n          }\n        }]\n      };\n      // 图表处理\n      if (this.configProps.cptDataForm.convertChart) {\n        const funcStr = this.configProps.cptDataForm.convertChart;\n        const convertFun = new Function('return ' + funcStr);\n        convertFun()(this.chartOption);\n      }\n      that.chart.setOption(that.chartOption);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}