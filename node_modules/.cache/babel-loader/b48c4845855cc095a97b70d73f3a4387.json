{"ast":null,"code":"const isString = str => Object.prototype.toString.call(str) === '[object String]';\n// 获取隐藏元素的宽高\nconst getHiddenEl = el => {\n  let hiddenWidth = 0;\n  let hiddenHeight = 0;\n  if (el.style.display === 'none') {\n    const baseTransform = el.style.transform;\n    el.style.transform = 'translateY(-1000000px)';\n    el.style.display = 'block';\n    hiddenWidth = el.clientWidth;\n    hiddenHeight = el.clientHeight;\n    el.style.transform = baseTransform;\n    el.style.display = 'none';\n  } else {\n    hiddenWidth = el.clientWidth;\n    hiddenHeight = el.clientHeight;\n  }\n  return {\n    hiddenWidth,\n    hiddenHeight\n  };\n};\nexport default {\n  name: 'RightMenu',\n  props: {\n    // 配置项\n    menu: {\n      // 本节点的菜单选项\n      type: Array,\n      default: () => {}\n    },\n    canClickFather: {\n      // 点击父级节点是否也触发事件\n      type: Boolean,\n      default: false\n    },\n    canHoverOut: {\n      // 是否能悬浮在ctxmenu之外\n      type: Boolean,\n      default: false\n    },\n    backgroundColor: {\n      type: String,\n      default: ''\n    },\n    activeColor: {\n      type: String,\n      default: ''\n    },\n    isTop: {\n      // 是否是最顶层的那个组件，顶层组件需要特殊处理\n      type: Boolean,\n      default: true\n    },\n    posX: {\n      type: Number,\n      default: 0\n    },\n    posY: {\n      type: Number,\n      default: 0\n    },\n    nowBoxWidth: {\n      // 当前ul的宽度, 用于计算子节点的X坐标\n      type: Number,\n      default: 0\n    },\n    absoluteX: {\n      // 当前ul的绝对坐标\n      type: Number,\n      default: 0\n    },\n    needReverse: {\n      // 是否需要翻转，窗口右侧点击的时候需要\n      type: Boolean,\n      default: false\n    },\n    showFlag: {\n      // 显示隐藏切换，控制子节点的activeindex\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      activeIndex: null,\n      sonPosX: 0,\n      // 相对于父节点的x坐标\n      sonPosY: 0,\n      eventListening: false,\n      isDestoryed: false,\n      ulWidth: 0,\n      sonNeedReverse: false,\n      sonAbsoluteX: 0,\n      hasIcon: false // 当前列表有没有图标\n    };\n  },\n\n  computed: {\n    compstyle() {\n      if (this.needReverse && !this.isTop) {\n        return `background-color: ${this.backgroundColor};top: ${this.posY}px;right: 5px;`;\n      }\n      return `background-color: ${this.backgroundColor};top: ${this.posY}px;left: ${this.posX}px;`;\n    }\n  },\n  watch: {\n    showFlag() {\n      // 每次切换显示隐藏之后清空子项的active项\n      this.activeIndex = null;\n    }\n  },\n  mounted() {\n    this.addEvent();\n    let hasIcon = false;\n    for (let i = 0; i < this.menu.length; i++) {\n      if (this.menu[i].icon) {\n        hasIcon = true;\n        break;\n      }\n    }\n    this.hasIcon = hasIcon;\n  },\n  methods: {\n    handleContextmenu(event) {\n      event.preventDefault();\n    },\n    handleMouseover(event, item, index) {\n      event.stopPropagation();\n      this.activeIndex = item.key;\n      // 如果有子项，就获取子项的位置信息\n      if (item.children && item.children.length) {\n        const liNode = this.findInCtxMenu(event.target, 'LI').el;\n        let ulNode = null;\n        if (event.target.nodeName === 'UL' && !this.isTop) {\n          ulNode = event.target;\n        } else {\n          ulNode = this.findInCtxMenu(liNode, 'UL').el;\n        }\n        this.ulWidth = ulNode.clientWidth; // 当前UL的宽度\n        if (liNode.lastChild && liNode.lastChild.nodeName === 'UL') {\n          const {\n            hiddenWidth\n          } = getHiddenEl(liNode.lastChild);\n          if (this.absoluteX + this.ulWidth + hiddenWidth > document.body.clientWidth - 5) {\n            this.sonNeedReverse = true;\n          } else {\n            if (ulNode === this.$el) {\n              this.sonPosX = this.ulWidth - 5;\n            }\n          }\n        }\n        this.sonAbsoluteX = this.absoluteX + this.ulWidth; // 子节点的绝对坐标\n        this.sonPosY = index * 32 + 5; // 如果换行这个就需要特殊处理\n      }\n    },\n\n    handleClick(item, event) {\n      if (event) {\n        event.stopPropagation();\n      }\n      if (this.canClickFather || !this.canClickFather && !item.children) {\n        if (this.isTop) {\n          // 顶层节点在实例化的时候定义了这个方法\n          this.topEmitClick(item, event);\n          this.destoryCom(event, true);\n        } else {\n          this.$emit('emitClick', item, event);\n        }\n      }\n    },\n    findInCtxMenu(el, tarNode) {\n      // 判断一个元素是否是在ctx菜单里面, tarNode表示目标，为LI或者UL\n      let flag = false;\n      let tempEl = el; // 最近一个父级节点\n      while (tempEl && !flag) {\n        if (tempEl.className && isString(tempEl.className) && tempEl.className.indexOf('ctx-menu-') !== -1 && (!tarNode || tarNode === tempEl.nodeName)) {\n          flag = true;\n        } else {\n          tempEl = tempEl.parentNode;\n        }\n      }\n      return {\n        flag,\n        el: tempEl\n      };\n    },\n    mouseWheelEvent(event) {\n      this.destoryCom(event);\n    },\n    mouseClickEvent(event) {\n      const {\n        flag\n      } = this.findInCtxMenu(event.target);\n      if (!flag) {\n        this.destoryCom(event);\n      }\n    },\n    mouseMoveEvent(event) {\n      const {\n        flag\n      } = this.findInCtxMenu(event.target);\n      if (!flag) {\n        this.activeIndex = null;\n      }\n    },\n    addEvent() {\n      // 只绑定一次点击事件\n      if (!this.eventListening && this.isTop) {\n        document.addEventListener('click', this.mouseClickEvent);\n        document.addEventListener('mousedown', this.mouseClickEvent);\n        document.addEventListener('mousewheel', this.mouseWheelEvent);\n        if (!this.canHoverOut) {\n          document.addEventListener('mouseover', this.mouseMoveEvent);\n        }\n        this.eventListening = true;\n      }\n    },\n    removeEvent() {\n      document.removeEventListener('click', this.mouseClickEvent);\n      document.removeEventListener('mousedown', this.mouseClickEvent);\n      document.removeEventListener('mousewheel', this.mouseWheelEvent);\n      document.addEventListener('mouseover', this.mouseMoveEvent);\n      this.eventListening = false;\n    },\n    destoryCom(event, noEmit) {\n      if (!noEmit) {\n        this.topEmitCancel(event);\n      }\n      this.removeEvent();\n      this.isDestoryed = true;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}