{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getDataJson, pollingRefresh } from '@/utils';\nexport default {\n  name: 'LineChart',\n  props: {\n    cptId: String,\n    width: Number,\n    height: Number,\n    configProps: Object\n  },\n  data() {\n    return {\n      uuid: '',\n      chartOption: {},\n      chart: undefined,\n      cptData: []\n    };\n  },\n  watch: {\n    'configProps.attribute': {\n      handler(newObj) {\n        this.loadChart(newObj);\n      },\n      deep: true // 深度监听\n    },\n\n    width() {\n      this.chart.resize();\n    },\n    height() {\n      this.chart.resize();\n    }\n  },\n  created() {\n    this.uuid = require('uuid').v1();\n  },\n  mounted() {\n    this.chart = this.$echarts.init(document.getElementById(this.uuid));\n    this.refreshCptData();\n  },\n  methods: {\n    refreshCptData() {\n      pollingRefresh(this.uuid, this.configProps.cptDataForm, this.loadData);\n    },\n    loadData() {\n      getDataJson(this.configProps.cptDataForm, this.cptId).then(res => {\n        this.cptData = res;\n        this.loadChart(this.configProps.attribute);\n      });\n    },\n    loadChart(attribute) {\n      const that = this;\n      const series = [];\n      let xData = [];\n      this.cptData.forEach(c => {\n        if (xData.length === 0) {\n          xData = c.xData.split(',');\n        }\n        series.push({\n          data: c.yData.split(','),\n          type: 'line',\n          smooth: attribute.smooth,\n          // 线条上的圆点\n          showSymbol: attribute.showSymbol,\n          areaStyle: {\n            color: new that.$echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: attribute.areaColor1\n            }, {\n              offset: 0.5,\n              color: attribute.areaColor2\n            }, {\n              offset: 1,\n              color: attribute.areaColor3\n            }])\n          }\n        });\n      });\n      that.chartOption = {\n        color: attribute.lineColor,\n        title: {\n          text: attribute.title,\n          subtext: attribute.subtext,\n          left: attribute.titleLeft,\n          top: attribute.titleTop,\n          textStyle: {\n            color: attribute.titleTextColor\n          },\n          subtextStyle: {\n            fontSize: 12,\n            color: attribute.subtextColor\n          }\n        },\n        grid: {\n          x: 10,\n          y: 30,\n          x2: 10,\n          y2: 10,\n          containLabel: true\n        },\n        xAxis: {\n          type: 'category',\n          data: xData,\n          axisLabel: {\n            show: attribute.xLabelShow,\n            color: attribute.xLabelColor\n          },\n          axisLine: {\n            show: attribute.xLineShow,\n            lineStyle: {\n              color: attribute.xLineColor\n            }\n          },\n          axisTick: {\n            // x轴刻度线\n            show: attribute.xTickShow\n          }\n        },\n        yAxis: {\n          type: 'value',\n          axisLabel: {\n            show: attribute.yLabelShow,\n            color: attribute.yLabelColor\n          },\n          axisLine: {\n            show: attribute.yLineShow,\n            lineStyle: {\n              color: attribute.yLineColor\n            }\n          },\n          axisTick: {\n            // y轴刻度线\n            show: attribute.yTickShow\n          },\n          splitLine: {\n            // 网格线\n            show: attribute.yGridLineShow\n          }\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross'\n          }\n        },\n        series\n      };\n      // 图表处理\n      if (this.configProps.cptDataForm.convertChart) {\n        const funcStr = this.configProps.cptDataForm.convertChart;\n        const convertFun = new Function('return ' + funcStr);\n        convertFun()(this.chartOption);\n      }\n      that.chart.setOption(that.chartOption);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}