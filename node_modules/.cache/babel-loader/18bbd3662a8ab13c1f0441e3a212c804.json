{"ast":null,"code":"import BCodeMirror from '@/components/BCodeMirror.vue';\nimport BColorPicker from '@/components/BColorPicker.vue';\nexport default {\n  name: 'CptDataConfig',\n  components: {\n    BColorPicker,\n    BCodeMirror\n  },\n  inject: ['refreshCptData'],\n  data() {\n    return {\n      codeVisible: false,\n      codeMode: '',\n      codeField: '',\n      dataSourceRadios: [{\n        value: 1,\n        label: '静态数据'\n      }, {\n        value: 2,\n        label: '动态数据'\n      }, {\n        value: 3,\n        label: 'sql'\n      }, {\n        value: 4,\n        label: 'WebSocket'\n      }]\n    };\n  },\n  computed: {\n    currentCptIndex() {\n      return this.$store.state.bigScreen.curComponentIndex;\n    },\n    refName() {\n      // return this.currentCpt.componentName + this.currentCptIndex\n      return this.currentCpt.id;\n    },\n    windowHeight() {\n      return this.$store.state.bigScreen.windowHeight;\n    },\n    currentCpt() {\n      return this.$store.state.bigScreen.curComponent;\n    },\n    dataPollEnable: {\n      get() {\n        return !!(this.currentCpt.configProps.cptDataForm && this.currentCpt.configProps.cptDataForm.pollTime && this.currentCpt.configProps.cptDataForm.pollTime !== 0);\n      },\n      set(newVal) {\n        if (newVal) {\n          this.currentCpt.configProps.cptDataForm.pollTime = 8;\n        } else {\n          this.currentCpt.configProps.cptDataForm.pollTime = 0;\n          // 清除定时器\n          const refName = this.currentCpt.componentName + this.currentCptIndex;\n          this.refreshCptData(refName);\n        }\n        return newVal;\n      }\n    }\n  },\n  methods: {\n    confirmEditCode(val) {\n      if (val === 'reqParams') {\n        // 修改传参时，需要同步更新当前组件的传参\n        const id = this.currentCpt.id;\n        const params = JSON.parse(this.currentCpt.configProps.cptDataForm[this.codeField]);\n        this.$store.dispatch('bigScreen/changeReqParams', {\n          id,\n          params\n        });\n      }\n      this.codeVisible = false;\n    },\n    cancelEditCode(val) {\n      this.codeVisible = false;\n    },\n    showCodeEditor(type) {\n      switch (type) {\n        case 'val':\n          this.codeMode = 'json';\n          this.codeField = 'dataText';\n          break;\n        case 'params':\n          this.codeMode = 'json';\n          this.codeField = 'reqParams';\n          break;\n        case 'sql':\n          this.codeMode = 'sql';\n          this.codeField = 'sql';\n          break;\n        case 'convertData':\n          this.codeMode = 'javascript';\n          this.codeField = 'convertData';\n          break;\n        case 'convertChart':\n          this.codeMode = 'javascript';\n          this.codeField = 'convertChart';\n          break;\n        default:\n          break;\n      }\n      this.codeVisible = true;\n    },\n    changeDataSource(val) {\n      // 静态数据不显示轮询按钮\n      if (val === 1) {\n        this.currentCpt.configProps.cptDataForm.pollTime = 0;\n      }\n      // 解决接口切换到 sql 产生的 codemirror mode 污染\n      this.currentCpt.configProps.cptDataForm.dataSource = val;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}