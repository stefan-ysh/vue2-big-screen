{"ast":null,"code":"// http://echarts.zhangmuchen.top/#/detail?cid=xBJ1s5UGI7&version=5.4.0\nimport { getDataJson, pollingRefresh } from '@/utils';\nexport default {\n  name: 'CapsuleChart',\n  props: {\n    width: Number,\n    height: Number,\n    configProps: Object,\n    cptId: String\n  },\n  data() {\n    return {\n      uuid: null,\n      chartOption: {},\n      chart: undefined,\n      cptData: {}\n    };\n  },\n  watch: {\n    'configProps.attribute': {\n      handler(newObj) {\n        this.loadChart(newObj);\n      },\n      deep: true\n    },\n    width() {\n      this.chart.resize();\n    },\n    height() {\n      this.chart.resize();\n    }\n  },\n  created() {\n    this.uuid = require('uuid').v1();\n  },\n  mounted() {\n    this.chart = this.$echarts.init(document.getElementById(this.uuid));\n    this.refreshCptData();\n    this.chart.on('click', params => {\n      // debugger\n    });\n  },\n  methods: {\n    refreshCptData() {\n      pollingRefresh(this.uuid, this.configProps.cptDataForm, this.loadData);\n    },\n    loadData() {\n      getDataJson(this.configProps.cptDataForm, this.cptId).then(res => {\n        this.cptData = res;\n        this.loadChart(this.configProps.attribute);\n      });\n    },\n    // 自定义图例的函数 用于处理每列数据\n    // getFormatter(name) {\n    //   debugger\n    //   const arr = []\n    //   let amt, count, percent\n    //   const data = this.CardTypeSum\n    //   for (const item of data) {\n    //     if (item.CardTypeName === name) {\n    //       count = item.SaleNum + '单'\n    //       amt = '￥' + item.SaleAmt\n    //       if (this.active === 0) {\n    //         percent = ((item.SaleAmt / this.allAmt) * 100).toFixed(2) + '%'\n    //       } else {\n    //         percent = ((item.SaleNum / this.allNum) * 100).toFixed(2) + '%'\n    //       }\n    //     }\n    //   }\n    // },\n    loadChart(attribute) {\n      // 最大值 作为背景\n      // const maxArr = [];\n      // const len = this.cptData.xData.split(\",\").length;\n      // for (let i = 0; i < len; i++) {\n      //   maxArr.push(this.width);\n      // }\n      const that = this;\n      // let columnColor = attribute.barColor;\n      // if (attribute.gradualColor) {\n      //   columnColor = new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\n      //     { offset: 0, color: attribute.barColor1 },\n      //     { offset: 0.5, color: attribute.barColor2 },\n      //     { offset: 1, color: attribute.barColor3 },\n      //   ]);\n      // }\n      // const colors = [\n      //   \"#DE3757FF\",\n      //   \"#CFAC1DFF\",\n      //   \"#24C47DFF\",\n      //   \"#DE3757FF\",\n      //   \"#24C47DFF\",\n      //   \"#CFAC1DFF\",\n      // ];\n\n      that.chartOption = {\n        title: {\n          show: attribute.titleShow,\n          text: attribute.chartTitle,\n          textStyle: {\n            color: attribute.titleTextColor,\n            fontSize: attribute.titleFontSize\n          },\n          left: attribute.titleLeft,\n          top: attribute.titleTop\n        },\n        backgroundColor: attribute.bgColor,\n        // tooltip（提示框组件）\n        tooltip: {\n          // trigger(触发类型)，可选'item','axis','none'\n          trigger: 'axis',\n          axisPointer: {\n            // 指示器类型,可选'line','shadow','cross'\n            type: attribute.axisPointerType\n          },\n          formatter: function (params) {\n            return `${params[0].name}: ${params[0].data}`;\n          }\n        },\n        // echarts图表的相对于容器的布局,\n        // grid: {\n        //   top: 90,\n        // },\n        legend: {},\n        xAxis: [{\n          type: 'value',\n          splitLine: {\n            show: attribute.xSplitLine\n          },\n          // axisTick 坐标轴刻度相关设置\n          axisTick: {\n            show: attribute.xAxisTick\n          },\n          // axixLine 坐标轴轴线相关设置\n          axisLine: {\n            show: attribute.xAxisLine,\n            lineStyle: {\n              color: attribute.xLineColor\n            }\n          },\n          // axisLabel 坐标轴刻度标签的相关设置\n          axisLabel: {\n            show: attribute.xAxisShow,\n            fontSize: attribute.xLabelFontSize,\n            color: attribute.xLabelColor,\n            rotate: attribute.xFontRotate\n          }\n        }],\n        yAxis: [{\n          type: 'category',\n          data: this.cptData.xData.split(','),\n          axisLabel: {\n            show: attribute.yAxisShow,\n            color: attribute.yLabelColor,\n            fontSize: attribute.yLabelFontSize,\n            rotate: attribute.yFontRotate\n          },\n          splitLine: {\n            show: attribute.ySplitLine\n          },\n          axisLine: {\n            show: attribute.yAxisLine,\n            lineStyle: {\n              color: attribute.yLineColor\n            }\n          },\n          axisTick: {\n            show: attribute.yAxisTick\n          }\n        }],\n        series: [{\n          type: 'bar',\n          data: this.cptData.yData.split(','),\n          barWidth: attribute.barWidth,\n          z: 2,\n          itemStyle: {\n            borderRadius: attribute.capsuleRadius,\n            color: function (params) {\n              const arr = that.cptData.yData.split(',').map(c => {\n                c = c * 1;\n                return c;\n              });\n              const max = Math.max.apply(null, arr);\n              if (params.data > max * 0 && params.data < max * 0.4) {\n                return attribute.weakColor;\n              } else if (params.data >= max * 0.4 && params.data < max * 0.7) {\n                return attribute.mediumColor;\n              } else if (params.data >= max * 0.7 && params.data <= max * 1) {\n                return attribute.strongColor;\n              }\n            }\n          },\n          label: {\n            // 开启显示\n            show: attribute.barLabelShow,\n            position: 'top',\n            color: attribute.barLabelColor,\n            fontSize: attribute.barLabelSize\n          },\n          showBackground: attribute.showBackground,\n          backgroundStyle: {\n            color: attribute.capsuleBgColor,\n            borderRadius: attribute.capsuleBgRadius\n          },\n          markPoint: {\n            data: [{\n              type: 'max',\n              name: '最大值'\n            }, {\n              type: 'min',\n              name: '最小值'\n            }]\n          },\n          markLine: {\n            data: [{\n              type: 'average',\n              name: '平均值'\n            }]\n          }\n        }\n        // {\n        //   type: \"bar\",\n        //   data: maxArr,\n        //   barWidth: attribute.bgBarWidth,\n        //   // barGap 不同系列的柱间距离\n        //   barGap: attribute.barGap,\n        //   z: 1,\n        //   itemStyle: {\n        //     //borderRadius bar圆角半径\n        //     borderRadius: attribute.capsuleBgRadius,\n        //     color: attribute.capsuleBgColor,\n        //   },\n        // },\n        ]\n      };\n      // 图表处理\n      if (this.configProps.cptDataForm.convertChart) {\n        const funcStr = this.configProps.cptDataForm.convertChart;\n        const convertFun = new Function('return ' + funcStr);\n        convertFun()(this.chartOption);\n      }\n      that.chart.setOption(that.chartOption);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}