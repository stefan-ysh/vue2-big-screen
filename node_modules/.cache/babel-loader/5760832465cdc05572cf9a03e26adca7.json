{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getDataJson, pollingRefresh } from '@/utils';\nexport default {\n  name: 'StackBar',\n  props: {\n    width: Number,\n    height: Number,\n    configProps: Object,\n    cptId: String\n  },\n  data() {\n    return {\n      sortType: '',\n      series: [],\n      uuid: null,\n      chartOption: {},\n      chart: undefined,\n      activeLegends: undefined,\n      cptData: {}\n    };\n  },\n  watch: {\n    'configProps.attribute': {\n      handler(newObj) {\n        this.loadChart(newObj);\n      },\n      deep: true\n    },\n    width() {\n      this.chart.resize();\n    },\n    height() {\n      this.chart.resize();\n    }\n  },\n  created() {\n    this.uuid = require('uuid').v1();\n    this.sortType = this.configProps.attribute.defaultSortType;\n  },\n  mounted() {\n    const that = this;\n    this.chart = this.$echarts.init(document.getElementById(this.uuid));\n    this.refreshCptData();\n    this.chart.on('click', params => {\n      // debugger\n    });\n    that.chart.on('legendselectchanged', params => {\n      that.activeLegends = params.selected;\n      that.loadChart(that.configProps.attribute);\n    });\n  },\n  methods: {\n    refreshCptData() {\n      pollingRefresh(this.uuid, this.configProps.cptDataForm, this.loadData);\n    },\n    loadData() {\n      getDataJson(this.configProps.cptDataForm, this.cptId).then(res => {\n        this.cptData = res;\n        this.loadChart(this.configProps.attribute);\n      });\n    },\n    // 转换数据\n    convertData() {\n      const result = this._.cloneDeep(this.cptData);\n      if (!result) return;\n      if (this.configProps.attribute.showSortButton) {\n        result.forEach(s => {\n          let num = 0;\n          for (const k in s) {\n            if (this.activeLegends && !this.activeLegends[k]) {\n              delete s.k;\n            } else if (!['name'].includes(k)) {\n              num += s[k] * 1;\n            }\n          }\n          s['__total'] = num;\n        });\n        result.sort((a, b) => {\n          if (this.sortType === 'desc') {\n            // 降序\n            return b.__total - a.__total;\n          } else {\n            // 升序\n            return a.__total - b.__total;\n          }\n        });\n      }\n      const xAxisLabels = [];\n      const obj = {};\n      result.forEach(d => {\n        // eslint-disable-next-line no-unused-vars\n        const {\n          name,\n          __total,\n          ...vals\n        } = d;\n        xAxisLabels.push({\n          name\n        });\n        for (const key in vals) {\n          if (obj[key]) {\n            obj[key].push(vals[key]);\n          } else {\n            obj[key] = [];\n            obj[key].push(vals[key]);\n          }\n        }\n      });\n      const types = [obj];\n      return {\n        xAxisLabels,\n        types\n      };\n    },\n    loadChart(attribute) {\n      const that = this;\n      this.series.length = 0;\n      const result = this.convertData();\n      // let columnColor = attribute.barColor\n      // if (attribute.gradualColor) {\n      //   columnColor = new this.$echarts.graphic.LinearGradient(\n      //     0, 0, 0, 1,\n      //     [\n      //       { offset: 0, color: attribute.barColor1 },\n      //       { offset: 0.5, color: attribute.barColor2 },\n      //       { offset: 1, color: attribute.barColor3 }\n      //     ])\n      // }\n      const keys = Object.keys(result.types[0]);\n      const vals = Object.values(result.types[0]);\n      const len = keys.length;\n      for (let i = 0; i < len; i++) {\n        const o = {\n          name: keys[i],\n          data: vals[i],\n          type: 'bar',\n          stack: 'test',\n          itemStyle: {\n            color: attribute.colors[i]\n          },\n          barWidth: attribute.barWidth\n        };\n        this.series.push(o);\n      }\n      that.chartOption = {\n        backgroundColor: attribute.backgroundColor,\n        colorgradientColor: ['red', 'yellow', 'green'],\n        title: {\n          text: attribute.chartTitle,\n          textStyle: {\n            color: attribute.titleTextColor\n          },\n          left: attribute.titleLeft,\n          top: attribute.titleTop\n        },\n        tooltip: {\n          trigger: 'axis',\n          // 坐标轴指示器，坐标轴触发有效\n          axisPointer: {\n            // 默认为直线，可选为：'line' | 'shadow'\n            type: 'shadow'\n          },\n          confine: true,\n          appendToBody: true\n        },\n        grid: {\n          // x: 10, y: 30, x2: 10, y2: 10,\n          // containLabel: true\n        },\n        legend: {\n          textStyle: {\n            show: false,\n            // todo\n            color: 'rgba(51, 51, 51, 0)'\n          },\n          show: attribute.legendVisible,\n          left: attribute.legendLeft,\n          top: attribute.legendTop\n        },\n        xAxis: {\n          show: attribute.xAxisShow,\n          type: 'category',\n          // type: attribute.barDirection === 'horizontal' ? 'value' : 'category',\n          data: result.xAxisLabels.map(c => {\n            return c.name;\n          }),\n          axisLabel: {\n            color: attribute.xLabelColor,\n            rotate: attribute.xFontRotate,\n            fontSize: 10\n          },\n          axisLine: {\n            show: attribute.xLineShow,\n            lineStyle: {\n              color: attribute.xLineColor,\n              type: 'dashed'\n            }\n          },\n          // x轴刻度线\n          axisTick: {\n            show: attribute.xTickShow\n          },\n          lineStyle: {\n            type: 'dashed'\n          }\n        },\n        yAxis: {\n          show: attribute.yAxisShow,\n          // type: attribute.barDirection === 'vertical' ? 'value' : 'category',\n          axisLabel: {\n            color: attribute.yLabelColor\n          },\n          axisLine: {\n            show: attribute.yLineShow,\n            lineStyle: {\n              color: attribute.yLineColor,\n              type: 'dashed'\n            }\n          },\n          // y轴刻度线\n          axisTick: {\n            show: attribute.yTickShow,\n            lineStyle: {\n              type: 'dashed'\n            }\n          },\n          // 网格线\n          splitLine: {\n            show: attribute.yGridLineShow\n            // lineStyle: {\n            //   type: 'dashed'\n            // }\n          }\n        },\n\n        series: this.series\n        //   [{\n        //   data: this.cptData.yData.split(','),\n        //   type: attribute.barType, // pictorialBar || bar\n        //   showBackground: attribute.barBgShow,\n        //   symbol: attribute.barPath,\n        //   backgroundStyle: {\n        //     color: attribute.barBgColor\n        //   },\n        //   barWidth: attribute.barWidth,\n        //   itemStyle: {\n        //     borderRadius: attribute.barBorderRadius\n        //   },\n        //   label: {\n        //     // 开启显示\n        //     show: attribute.barLabelShow,\n        //     position: 'top',\n        //     color: attribute.barLabelColor,\n        //     fontSize: attribute.barLabelSize\n        //   }\n        // }]\n      };\n      // 图表处理\n      if (this.configProps.cptDataForm.convertChart) {\n        const funcStr = this.configProps.cptDataForm.convertChart;\n        const convertFun = new Function('return ' + funcStr);\n        convertFun()(this.chartOption);\n      }\n      that.chart.setOption(that.chartOption);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}