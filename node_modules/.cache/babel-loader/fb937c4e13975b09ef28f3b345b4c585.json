{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// 大屏设计器状态存储\nconst designState = {\n  // 大屏总数据\n  bigScreenData: {\n    id: '',\n    title: '你的大屏',\n    screenWidth: 1920,\n    screenHeight: 1080,\n    bgColor: '#1d1e1f',\n    description: '',\n    bgImg: '',\n    isPublic: true,\n    password: '',\n    components: []\n  },\n  // 窗口宽度\n  windowWidth: 0,\n  // 窗口高度\n  windowHeight: 0,\n  // 画布容器\n  webContainer: undefined,\n  // 容器缩放比例\n  containerScale: 1,\n  // 已经添加到画布中的组件列表\n  componentList: [],\n  // 常用组件列表\n  historyUsedCpts: [],\n  // 当前选中的组件\n  curComponent: {\n    cptOption: undefined\n  },\n  // 当前选中组件的下标\n  curComponentIndex: -1,\n  // 画布背景风格 分为点阵和网格 lattice / grid\n  canvasBgStyle: 'lattice',\n  // 是否显示标尺\n  isShowRuler: true,\n  // 是否显示组件面板\n  componentPaneWidth: 200,\n  // 是否显示配置面板\n  configPaneWidth: 300,\n  // 是否显示组件坐标\n  isShowCoord: false\n};\nconst designActions = {\n  /** 大屏总数据操作 */\n  // 初始化大屏数据\n  initBigScreenData({\n    commit\n  }, data) {\n    commit('INIT_BIG_SCREEN_DATA', data);\n  },\n  setBigScreenData({\n    commit\n  }, params) {\n    commit('SET_BIG_SCREEN_DATA', params);\n  },\n  /** 设置画布样式等 */\n  // 设置显示坐标 or not\n  setCoordShowStatus({\n    commit,\n    state,\n    dispatch\n  }, data) {\n    commit('SET_COORD_SHOW_STATUS', data);\n  },\n  // 设置显示标尺 or not\n  setRuleShowStatus({\n    commit,\n    state,\n    dispatch\n  }, data) {\n    commit('SET_RULE_SHOW_STATUS', data);\n  },\n  // 更改画布背景风格\n  changeCanvasBgStyle({\n    commit,\n    state,\n    dispatch\n  }, style) {\n    state.canvasBgStyle = style;\n  },\n  // 切换组件及属性设置面板显示状态\n  changePaneDisplayStatus({\n    commit,\n    state,\n    dispatch\n  }, type) {\n    if (type === 'left') {\n      state.componentPaneWidth = state.componentPaneWidth === 0 ? 200 : 0;\n    } else {\n      state.configPaneWidth = state.configPaneWidth === 0 ? 300 : 0;\n    }\n    dispatch('initContainerSize');\n  },\n  // 画布容器，目前 用于截图\n  setContainer({\n    state\n  }, elRef) {\n    state.webContainer = elRef;\n  },\n  // 更改容器缩放比例\n  changeScale({\n    state\n  }, val) {\n    state.containerScale = val;\n  },\n  // 初始化容器缩放比例\n  initContainerSize({\n    state,\n    dispatch\n  }) {\n    state.windowWidth = document.documentElement.clientWidth;\n    state.windowHeight = document.documentElement.clientHeight;\n    const tempWidth = state.windowWidth - state.componentPaneWidth - state.configPaneWidth - 45;\n    const tempHeight = state.windowHeight - 65;\n    const screenX = (tempWidth / state.bigScreenData.screenWidth).toFixed(2) * 1;\n    const screenY = (tempHeight / state.bigScreenData.screenHeight).toFixed(2) * 1;\n    const minScale = Math.min(screenX, screenY);\n    // 设置缩放最小值，避免缩放过小页面卡死\n    state.containerScale = minScale <= 0.02 ? 0.02 : minScale;\n  },\n  // /** 画布组件操作 */\n  // 当前组件下标\n  setCurComponentIndex({\n    commit\n  }, index) {\n    commit('SET_CUR_COMPONENT_INDEX', index);\n  },\n  // 初始化组件列表\n  initComponentList({\n    commit\n  }, cpts) {\n    commit('INIT_COMPONENT_LIST', cpts);\n  },\n  // 复制组件\n  addCpt({\n    commit\n  }, cpt) {\n    commit('ADD_CPT', cpt);\n  },\n  // 删除画布中的组件\n  delCpt({\n    commit\n  }, index) {\n    commit('DEL_CPT', index);\n  },\n  // 清空画布\n  clearCanvas({\n    commit\n  }) {\n    commit('CLEAR_CANVAS');\n  },\n  // 设置当前选中的组件\n  setCurComponent({\n    commit\n  }, cpt) {\n    commit('SET_CUR_COMPONENT', cpt);\n  },\n  // 更新组件信息, params 包含两个值\n  // 一个是 id\n  // 一个是需要修改的属性键值对 data: { key: value }\n  // 如：要更改 id 为 1 的组件的可见度，则需要传值为 this.$store.dispatch('bigScreen/updateCptProp', { id: 1, data: { hidden: true } })\n  updateCptProp({\n    commit\n  }, params) {\n    commit('UPDATE_CPT_PROP', params);\n  }\n};\nconst designMutations = {\n  INIT_BIG_SCREEN_DATA(state, data) {\n    state.bigScreenData = data;\n  },\n  SET_BIG_SCREEN_DATA(state, params) {\n    state.bigScreenData = Object.assign(state.bigScreenData, params);\n  },\n  INIT_COMPONENT_LIST(state, cpts) {\n    state.componentList = cpts;\n  },\n  INIT_FREQUENTLY_USED_COMPONENTS(state) {\n    const cpts = localStorage.getItem('frequentlyUsedCpts');\n    state.historyUsedCpts = JSON.parse(cpts) || [];\n  },\n  ADD_HISTORY_USED_CPT(state, cpt) {\n    const idx = state.historyUsedCpts.findIndex(_f => {\n      return _f.name === cpt.name;\n    });\n    if (idx > -1) {\n      state.historyUsedCpts[idx].num += 1;\n    } else {\n      const tempVal = JSON.parse(JSON.stringify(cpt));\n      tempVal.num = 1;\n      state.historyUsedCpts.push(tempVal);\n    }\n    state.historyUsedCpts.sort(function (a, b) {\n      return b['num'] - a['num'];\n    });\n    const cpts = JSON.stringify(state.historyUsedCpts);\n    localStorage.setItem('frequentlyUsedCpts', cpts);\n  },\n  ADD_CPT(state, cpt) {\n    state.componentList.push(cpt);\n  },\n  DEL_CPT(state, index) {\n    const id = state.componentList[index].id;\n    state.componentList.splice(index, 1);\n    // 从全局组件引用中删除对应引用\n    this.commit('bigScreen/DEL_BIG_SCREEN_CPT_REF', id);\n  },\n  CLEAR_CANVAS(state) {\n    state.componentList = [];\n  },\n  SET_COORD_SHOW_STATUS(state, data) {\n    state.isShowCoord = data;\n  },\n  SET_RULE_SHOW_STATUS(state, data) {\n    state.isShowRuler = data;\n  },\n  SET_CUR_COMPONENT(state, cpt) {\n    // 图层滚动至图层容器中心可视区\n    const el = document.querySelector('#layer' + cpt.id);\n    setTimeout(() => {\n      el && el.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n    }, 0);\n    state.curComponent = cpt;\n  },\n  SET_CUR_COMPONENT_INDEX(state, index) {\n    state.curComponentIndex = index;\n  },\n  UPDATE_CPT_PROP(state, params) {\n    const {\n      id,\n      data\n    } = params;\n    if (id === state.curComponent.id) {\n      state.curComponent = Object.assign(state.curComponent, data);\n    } else {\n      let targetComponent = state.componentList.find(_c => {\n        return _c.id === id;\n      });\n      const tempVal = Object.assign(targetComponent, data);\n      targetComponent = tempVal;\n    }\n  }\n};\nconst designGetters = {\n  // 画布背景 分为点阵和网格 lattice / grid\n  designAreaStyle(state) {\n    if (state.canvasBgStyle === 'lattice') {\n      return {\n        'background-color': '#18181c',\n        height: state.windowHeight - 45 + 'px',\n        display: 'flex',\n        'background-image': `linear-gradient(#18181c 14px,transparent 0),linear-gradient(90deg,transparent 14px,#86909c 0)`,\n        'background-size': `15px 15px`\n      };\n    } else {\n      // 竖线  竖线背景 横线 横线背景\n      return {\n        height: state.windowHeight - 45 + 'px',\n        display: 'flex',\n        background: 'linear-gradient(-90deg, #545d63 1px, transparent 0px) 0px 0px / 20px 20px, linear-gradient(0deg, #545d63 1px, #18181c 0px) 0px 0px / 20px 20px'\n      };\n    }\n  }\n};\nexport { designState, designActions, designMutations, designGetters };","map":null,"metadata":{},"sourceType":"module"}