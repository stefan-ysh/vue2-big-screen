{"ast":null,"code":"import ComponentPane from '../modules/Pane/component-pane';\nimport ConfigPane from '../modules/Pane/config-pane';\nimport { clearCptInterval } from '@/utils';\nimport Toolbar from '../modules/Toolbar';\nimport RightPaneControlBar from '../modules/PaneControlBar/right-bar';\nimport LeftPaneControlBar from '../modules/PaneControlBar/left-bar';\nimport SketchRuler from '../modules/SketchRuler';\n// import * as BigscreenApi from '@/api'\nimport { Base64 } from 'js-base64';\nexport default {\n  name: 'BigScreenDesigner',\n  components: {\n    ConfigPane,\n    ComponentPane,\n    LeftPaneControlBar,\n    RightPaneControlBar,\n    SketchRuler,\n    Toolbar\n  },\n  directives: {\n    resize(el, binding, vNode) {\n      // 组件拉伸，移动位置\n      el.onmousedown = function (e) {\n        const that = vNode.context;\n        that.bgOpacity = 0.8;\n        const scaleClientX = e.clientX / that.containerScale;\n        const scaleClientY = e.clientY / that.containerScale;\n        const rbX = scaleClientX - el.parentNode.offsetWidth;\n        const rbY = scaleClientY - el.parentNode.offsetHeight;\n        const ltX = scaleClientX + el.parentNode.offsetWidth;\n        const ltY = scaleClientY + el.parentNode.offsetHeight;\n        const disX = scaleClientX - el.parentNode.offsetLeft;\n        const disY = scaleClientY - el.parentNode.offsetTop;\n        let cptWidth, cptHeight, cptX, cptY;\n        document.onmousemove = function (me) {\n          const meScaleClientX = me.clientX / that.containerScale;\n          const meScaleClientY = me.clientY / that.containerScale;\n          if (binding.value === 'move') {\n            cptX = meScaleClientX - disX;\n            cptY = meScaleClientY - disY;\n            // 遍历已经多选的组件，并更新改其位置\n            // new position = old position + moving distance\n            Object.keys(that.multipleCpts).forEach(key => {\n              const newX = that.multipleCptPositions[key].cptX + Math.round(meScaleClientX - scaleClientX);\n              const newY = that.multipleCptPositions[key].cptY + Math.round(meScaleClientY - scaleClientY);\n              that.multipleCpts[key].cptX = newX;\n              that.multipleCpts[key].cptY = newY;\n            });\n          } else {\n            switch (binding.value) {\n              case 'lt':\n                cptWidth = ltX - meScaleClientX;\n                cptHeight = ltY - meScaleClientY;\n                cptX = meScaleClientX - disX;\n                cptY = meScaleClientY - disY;\n                that.currentCpt.cptX = Math.round(cptX);\n                that.currentCpt.cptY = Math.round(cptY);\n                break;\n              case 't':\n                cptHeight = ltY - meScaleClientY;\n                cptY = meScaleClientY - disY;\n                that.currentCpt.cptY = Math.round(cptY);\n                break;\n              case 'rt':\n                cptWidth = meScaleClientX - rbX;\n                cptHeight = ltY - meScaleClientY;\n                cptY = meScaleClientY - disY;\n                that.currentCpt.cptY = Math.round(cptY);\n                break;\n              case 'r':\n                cptWidth = meScaleClientX - rbX;\n                break;\n              case 'rb':\n                cptWidth = meScaleClientX - rbX;\n                cptHeight = meScaleClientY - rbY;\n                break;\n              case 'b':\n                cptHeight = meScaleClientY - rbY;\n                break;\n              case 'lb':\n                cptWidth = ltX - meScaleClientX;\n                cptHeight = meScaleClientY - rbY;\n                cptX = meScaleClientX - disX;\n                that.currentCpt.cptX = Math.round(cptX);\n                break;\n              case 'l':\n                cptWidth = ltX - meScaleClientX;\n                cptX = meScaleClientX - disX;\n                that.currentCpt.cptX = Math.round(cptX);\n                break;\n            }\n            cptWidth = cptWidth < 40 ? 40 : cptWidth; // 限制最小缩放\n            cptHeight = cptHeight < 20 ? 20 : cptHeight;\n            if (cptWidth) that.currentCpt.cptWidth = Math.round(cptWidth);\n            if (cptHeight) that.currentCpt.cptHeight = Math.round(cptHeight);\n          }\n        };\n        document.onmouseup = function () {\n          that.bgOpacity = 1;\n          document.onmousemove = document.onmouseup = null;\n          // 解决多选移动未松开ctrl键第二次以后拖动定位还原\n          that.multipleCptPositions = JSON.parse(JSON.stringify(that.multipleCpts));\n        };\n        return false;\n      };\n    }\n  },\n  provide() {\n    return {\n      refreshCptData: this.refreshCptData\n    };\n  },\n  data() {\n    return {\n      bigscreenId: '',\n      // 背景透明度\n      bgOpacity: 1,\n      // 缩放按钮\n      resizeBars: Object.freeze([{\n        direction: 'lt',\n        style: 'top: 0; left: 0; cursor: nwse-resize; transform: translate(-50%, -50%);'\n      }, {\n        direction: 't',\n        style: 'top: 0; border-radius: 5px !important;  left: 50%; cursor: ns-resize; transform: translate(-50%, -50%);'\n      }, {\n        direction: 'rt',\n        style: 'top: 0; right: 0; cursor: nesw-resize; transform: translate(50%, -50%);'\n      }, {\n        direction: 'l',\n        style: 'top: 50%; left: 0; border-radius: 5px !important; cursor: ew-resize; transform: translate(-50%, -50%);'\n      }, {\n        direction: 'lb',\n        style: 'bottom: 0; left: 0; cursor: nesw-resize; transform: translate(-50%, 50%);'\n      }, {\n        direction: 'b',\n        style: 'bottom: 0; border-radius: 5px !important; left: 50%; cursor: ns-resize; transform: translate(-50%, 50%);'\n      }, {\n        direction: 'rb',\n        style: 'bottom: 0; right: 0; cursor: nwse-resize; transform: translate(50%, 50%);'\n      }, {\n        direction: 'r',\n        style: 'top: 50%; border-radius: 5px !important;  right: 0; cursor:ew-resize; transform: translate(50%, -50%);'\n      }]),\n      curDragCpt: '',\n      multipleCpts: {},\n      // 记录组件原来位置\n      multipleCptPositions: {}\n    };\n  },\n  computed: {\n    cptRefs() {\n      return this.$store.state.bigScreen.cptRefs;\n    },\n    designAreaStyle() {\n      return this.$store.getters['bigScreen/designAreaStyle'];\n    },\n    containerScale() {\n      return this.$store.state.bigScreen.containerScale;\n    },\n    windowWidth() {\n      return this.$store.state.bigScreen.windowWidth;\n    },\n    windowHeight() {\n      return this.$store.state.bigScreen.windowHeight;\n    },\n    cptPaneWidth() {\n      return this.$store.state.bigScreen.componentPaneWidth;\n    },\n    configPaneWidth() {\n      return this.$store.state.bigScreen.configPaneWidth;\n    },\n    designData() {\n      return this.$store.state.bigScreen.bigScreenData;\n    },\n    isShowCoord: {\n      get() {\n        return this.$store.state.bigScreen.isShowCoord;\n      },\n      set(val) {\n        this.$store.dispatch('bigScreen/setCoordShowStatus', val);\n      }\n    },\n    isShowRuler: {\n      get() {\n        return this.$store.state.bigScreen.isShowRuler;\n      },\n      set(val) {\n        this.$store.dispatch('bigScreen/setRuleShowStatus', val);\n      }\n    },\n    currentCptIndex() {\n      return this.$store.state.bigScreen.curComponentIndex;\n    },\n    // 当前选中的组件\n    currentCpt() {\n      return this.$store.state.bigScreen.curComponent;\n    },\n    cacheComponents() {\n      return this.$store.state.bigScreen.componentList;\n    }\n  },\n  created() {\n    this.$store.commit('bigScreen/INIT_FREQUENTLY_USED_COMPONENTS');\n    this.loadData();\n  },\n  mounted() {\n    window.addEventListener('keydown', this.handleKeyDown);\n    window.addEventListener('resize', this.initContainerSize);\n    this.$store.dispatch('bigScreen/setContainer', this.$refs.webContainer);\n  },\n  beforeDestroy() {\n    this.$store.commit('bigScreen/CLEAR_BIG_SCREEN_CPT_REF');\n    window.removeEventListener('keydown', this.handleKeyDown);\n    window.removeEventListener('resize', this.initContainerSize);\n  },\n  methods: {\n    convertAnimation(animation) {\n      if (animation) {\n        const {\n          name,\n          speed,\n          repeat,\n          delay\n        } = animation;\n        return `animate__animated animate__${name} ${speed} ${repeat} ${delay}`;\n      }\n    },\n    commonCptStyle(item, index, type) {\n      if (type === 'rotate') {\n        return {\n          transform: `rotateX(${item.rotateX}deg) rotateY(${item.rotateY}deg) rotateZ(${item.rotateZ}deg)`,\n          opacity: item.opacity ? item.opacity : item.hidden ? '0.3' : '1'\n        };\n      }\n      return {\n        width: Math.round(item.cptWidth) + 'px',\n        height: Math.round(item.cptHeight) + 'px',\n        top: Math.round(item.cptY) + 'px',\n        left: Math.round(item.cptX) + 'px',\n        zIndex: this.currentCptIndex === index ? 1800 : item.cptZ\n      };\n    },\n    // 点击右键菜单时触发\n    handleContextMenu(event) {\n      const menu = [{\n        label: '上移一层',\n        icon: 'el-icon-arrow-up',\n        key: 'layerUp'\n      }, {\n        label: '下移一层',\n        icon: 'el-icon-arrow-down',\n        key: 'layerDown'\n      }, {\n        label: '置顶图层',\n        icon: 'el-icon-top',\n        key: 'layerTop'\n        // callback: this.copyCpt\n      }, {\n        label: '置底图层',\n        icon: 'el-icon-bottom',\n        key: 'layerBottom'\n        // callback: this.copyCpt\n      }, {\n        label: '复制图层',\n        icon: 'el-icon-document-copy',\n        key: 'copyLayer',\n        callback: this.copyCpt\n      }, {\n        label: '删除图层',\n        icon: 'el-icon-delete',\n        key: 'delLayer',\n        callback: this.copyCpt\n      }];\n      const rightMenuOptions = {\n        menu,\n        event,\n        backgroundColor: '#27343e',\n        activeColor: '#23434f'\n      };\n      this.$rightCtx(rightMenuOptions).then(res => {\n        switch (res.key) {\n          case 'layerUp':\n            this.currentCpt.cptZ++;\n            break;\n          case 'layerDown':\n            this.currentCpt.cptZ--;\n            break;\n          case 'layerTop':\n            // todo\n            break;\n          case 'layerBottom':\n            // todo\n            break;\n          case 'copyLayer':\n            res.callback(this.currentCpt);\n            break;\n          case 'delLayer':\n            this.delCpt(this.currentCpt, event.target.dataset.index);\n            break;\n          default:\n            break;\n        }\n      }).catch(err => {\n        // this.$modal.msg('操作失败，请重试')\n        console.log('右键操作取消/失败', err);\n      });\n    },\n    handleKeyDown(e) {\n      // 没有组件选中时，则无需做任何处理\n      if (this.currentCptIndex === -1) {\n        return;\n      }\n      // 是否需在其他输入元素聚焦\n      const isIptElFocus = ['INPUT', 'TEXTAREA'].includes(document.activeElement.nodeName);\n      // 存在输入框聚焦时，不触发方向键移动事件，持续优化\n      if (isIptElFocus) {\n        return false;\n      }\n      // 键盘事件的 code\n      const keyCode = e.which || e.keyCode;\n      // ctrl 键是否按下\n      const isCtrlDown = e.ctrlKey ? e.ctrlKey : keyCode === 17;\n      // ctrl + c\n      if (keyCode === 67 && isCtrlDown) {\n        this.copyCpt(this.currentCpt);\n      }\n      const key = e.key;\n      if (['ArrowDown', 'Arrow', 'ArrowLeft', 'ArrowRight'].includes(key)) {\n        e.preventDefault();\n      }\n      let speed = 1;\n      if (e.shiftKey) {\n        speed = 5;\n      }\n      let idx = 0;\n      switch (key) {\n        // 方向键移动当前组件\n        case 'ArrowDown':\n          this.currentCpt.cptY += speed;\n          break;\n        case 'ArrowUp':\n          this.currentCpt.cptY -= speed;\n          break;\n        case 'ArrowLeft':\n          this.currentCpt.cptX -= speed;\n          break;\n        case 'ArrowRight':\n          this.currentCpt.cptX += speed;\n          break;\n        // 删除键(delete) 和 退回键(back space) 触发删除组件\n        // 避免有输入框聚焦时影响输入，此处判断是否存在聚焦中的输入框\n        case 'Delete':\n          if (!isIptElFocus) {\n            idx = this.cacheComponents.findIndex(c => c.id === this.currentCpt.id);\n            this.delCpt(this.currentCpt, idx);\n          }\n          break;\n        case 'Backspace':\n          if (!isIptElFocus) {\n            idx = this.cacheComponents.findIndex(c => c.id === this.currentCpt.id);\n            this.delCpt(this.currentCpt, idx);\n          }\n          break;\n      }\n    },\n    initContainerSize() {\n      this.$store.dispatch('bigScreen/initContainerSize');\n    },\n    // 加载数据\n    async loadData() {\n      this.$modal.loading('加载中');\n      let bigscreenData = '';\n      const initData = {\n        id: '',\n        title: '测试大屏',\n        screenWidth: 1920,\n        screenHeight: 1080,\n        bgColor: '#040f22',\n        description: '',\n        bgImg: '',\n        isPublic: true,\n        password: '',\n        components: []\n      };\n      const cacheData = localStorage.getItem('viewData');\n      if (cacheData) {\n        bigscreenData = JSON.parse(Base64.decode(cacheData));\n      } else {\n        bigscreenData = initData;\n      }\n      const cptList = bigscreenData.components;\n      this.$store.dispatch('bigScreen/initViewBigScreenData', bigscreenData);\n      this.$store.dispatch('bigScreen/initBigScreenData', bigscreenData);\n      this.$store.dispatch('bigScreen/initComponentList', cptList);\n      // 全局注册组件引用\n      this.$nextTick(() => {\n        this.designData.components.forEach(c => {\n          const id = c.id;\n          const ref = this.$refs[id][0];\n          this.$store.commit('bigScreen/ADD_BIG_SCREEN_CPT_REF', {\n            id,\n            ref\n          });\n        });\n      });\n      this.designData.components.forEach(cpt => {\n        if (cpt.configProps.cptDataForm) {\n          // if (!cpt.configProps.cptDataForm.reqParams) {\n          //   console.warn(cpt.layerName + '未设置参数')\n          //   return\n          // }\n          const id = cpt.id;\n          const params = JSON.parse(cpt.configProps.cptDataForm.reqParams || '{}');\n          this.$store.dispatch('bigScreen/changeReqParams', {\n            id,\n            params\n          });\n        }\n      });\n      this.$modal.closeLoading();\n      this.initContainerSize();\n    },\n    // 复制组件\n    copyCpt(item) {\n      const copyCpt = JSON.parse(JSON.stringify(item));\n      copyCpt.id = require('uuid').v1();\n      // 复制出的组件坐标需有所偏移，与源组件有所区分，以便能清楚感知\n      copyCpt.cptX = item.cptX + 30;\n      copyCpt.cptY = item.cptY + 30;\n      copyCpt.cptZ = this.cacheComponents.length + 1;\n      this.$store.dispatch('bigScreen/addCpt', copyCpt);\n      this.$nextTick(() => {\n        this.$store.commit('bigScreen/ADD_BIG_SCREEN_CPT_REF', {\n          id: copyCpt.id,\n          ref: this.$refs[copyCpt.id][0]\n        });\n      });\n      // todo 根据类型提示\n      // 聚焦到复制的组件\n      this.$store.dispatch('bigScreen/setCurComponentIndex', this.cacheComponents.length - 1);\n      this.$store.dispatch('bigScreen/setCurComponent', copyCpt);\n      // 将复制的组件添加到已选组件列表\n      this.clearMultipleCpts();\n      this.setMultipleCpt({}, copyCpt);\n      this.$message.closeAll();\n      this.$modal.msgSuccess(`${item.cptTitle} 组件复制成功！`);\n    },\n    refreshCptData(refName) {\n      const cptRef = this.cptRefs.get(refName);\n      if (!cptRef.refreshCptData) {\n        this.$message.info('当前图层还未实现 refreshCptData 方法');\n      } else {\n        // 刷新子组件数据，ref 引用为组件名加 index\n        cptRef.refreshCptData();\n      }\n    },\n    outBlur() {\n      // 取消聚焦组件\n      this.$store.dispatch('bigScreen/setCurComponentIndex', -1);\n      this.$store.dispatch('bigScreen/setCurComponent', {});\n      this.clearMultipleCpts();\n    },\n    // 删除组件\n    delCpt(cpt, index) {\n      this.$confirm('删除' + cpt.cptTitle + '组件?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning',\n        customClass: 'big-screen-confirm-dialog'\n      }).then(() => {\n        // 记录一个bug，v-for key值重复导致页面渲染数据错乱。在丢下组件时实用uuid作为key解决。\n        this.$store.dispatch('bigScreen/setCurComponent', {});\n        this.$store.dispatch('bigScreen/delCpt', index);\n        const childId = this.$refs[cpt.componentName + index][0].uuid;\n        clearCptInterval(childId);\n      }).catch(() => {});\n    },\n    // 显示配置面板\n    showConfigPane(e, item, index) {\n      // 设置多选组件集合\n      this.setMultipleCpt(e, item);\n      // 刷新属性栏数据，页面上拖动的组件执行点击事件来更新组件的属性栏\n      this.$store.dispatch('bigScreen/setCurComponent', item);\n      this.$store.dispatch('bigScreen/setCurComponentIndex', index);\n      if (this.$refs['div' + item.componentName + index]) {\n        // 聚焦 用于多选移动\n        this.$refs['div' + item.componentName + index][0].focus();\n      }\n      this.$refs['configPane'].showCptConfig(item);\n    },\n    dragStart(curDragCpt) {\n      // 拖拽开始,及从左侧组件列表拖起组件时\n      this.curDragCpt = curDragCpt;\n      curDragCpt.draggable = false;\n    },\n    dropOver(e) {\n      e.preventDefault();\n    },\n    handleDrop(e) {\n      const config = JSON.parse(this.curDragCpt.dataset.config);\n      this.$store.commit('bigScreen/ADD_HISTORY_USED_CPT', config);\n      if (config.props.cptDataForm) {\n        // 将静态数据、api、sql用三个字段存储，配置项未填写apiUrl字段和sql字段在此处赋默认值\n        if (!config.props.cptDataForm.apiUrl) {\n          config.props.cptDataForm.apiUrl = '/sc/test';\n        }\n        if (!config.props.cptDataForm.sql) {\n          config.props.cptDataForm.sql = '-- 请在此输入用来查询数据的 sql 语句\\n';\n        }\n        // 初始化数据/图表处理函数\n        if (!config.props.cptDataForm.convertData) {\n          config.props.cptDataForm.convertData = '(data) => {\\n  // data 为图表需要的显示数据，如果数据源为接口请求，则 data 为接口返回数据\\n  return data;\\n};';\n        }\n        if (!config.props.cptDataForm.convertChart) {\n          config.props.cptDataForm.convertChart = '(option) => {\\n  // option 为图表需要的样式数据，更多详情可查看 https://echarts.apache.org/zh/option.html\\n  return option;\\n};';\n        }\n      }\n      // meta 没设置默认宽高则在此处设置\n      // 宽\n      const w = config.width || 400;\n      // 高\n      const h = config.height || 300;\n      // 生成 id\n      const id = require('uuid').v1();\n      const animation = {\n        name: '',\n        delay: 'animate__delay-0s',\n        speed: 'animate__slow',\n        repeat: 'animate__repeat-1'\n      };\n      const cpt = {\n        id,\n        cptTitle: config.name,\n        layerName: config.name,\n        icon: config.icon,\n        hidden: false,\n        opacity: config.opacity || 1,\n        componentName: config.componentName,\n        setterName: config.setterName ? config.setterName : config.componentName + '-setter',\n        configProps: {\n          ...config.props,\n          ...{\n            animation\n          }\n        },\n        // 将鼠标 drop 处设置为组件中心\n        cptX: Math.round(e.offsetX) - w / 2,\n        cptY: Math.round(e.offsetY) - h / 2,\n        cptZ: this.cacheComponents.length + 1,\n        cptWidth: w,\n        cptHeight: h,\n        rotateX: 0,\n        rotateY: 0,\n        rotateZ: 0\n      };\n      this.$store.dispatch('bigScreen/addCpt', cpt);\n      this.$nextTick(() => {\n        this.$store.commit('bigScreen/ADD_BIG_SCREEN_CPT_REF', {\n          id,\n          ref: this.$refs[id][0]\n        });\n      });\n      // 多选清空\n      this.clearMultipleCpts();\n      // 丢下组件后刷新组件属性栏,并选中 push 进的最新一个组件\n      this.showConfigPane({}, cpt, this.cacheComponents.length - 1);\n      this.$refs['configPane'].showCptConfig();\n    },\n    // 设置多选组件\n    setMultipleCpt(e, cpt) {\n      // 未按 ctrl 键\n      if (!e.ctrlKey && !e.metaKey) {\n        // 已多选的组件中没有当前组件时\n        // 清除已多选的组件\n        if (!this.multipleCpts[cpt.id]) {\n          this.clearMultipleCpts();\n        }\n      } else {\n        // 已多选的组件中没有当前组件时\n        // 将其在已多选列表中清除\n        if (this.multipleCpts[cpt.id]) {\n          return delete this.multipleCpts[cpt.id];\n        }\n      }\n      // 修复修改时无响应问题\n      // this.multipleCpts[cpt.id] = cpt\n      this.$set(this.multipleCpts, [cpt.id], cpt);\n      this.multipleCptPositions[cpt.id] = JSON.parse(JSON.stringify(cpt));\n    },\n    // 清空多选组件\n    clearMultipleCpts() {\n      this.multipleCpts = {};\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}