{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { clearCptInterval, fileDownload } from '@/utils';\n// import BigScreenPreview from '@/views/app/big-screen/preview'\nimport html2canvas from 'html2canvas';\n\n// import * as BigscreenApi from '@/api/app/big-screen';\nimport { Base64 } from 'js-base64';\nexport default {\n  name: 'Toolbar',\n  components: {\n    // BigScreenPreview\n  },\n  props: {\n    multipleCpts: {\n      type: Object,\n      default: () => {}\n    },\n    multipleCptPositions: {\n      type: Object,\n      default: () => {}\n    }\n  },\n  data() {\n    return {\n      appId: '',\n      bigscreenId: ''\n    };\n  },\n  computed: {\n    isMultiple() {\n      return Object.keys(this.multipleCpts).length >= 2;\n    },\n    cacheComponents() {\n      return this.$store.state.bigScreen.componentList;\n    },\n    containerScale: {\n      get() {\n        return this.$store.state.bigScreen.containerScale;\n      },\n      set(val) {\n        this.$store.dispatch('bigScreen/changeScale', val);\n      }\n    },\n    // 画布背景风格\n    canvasBgStyle() {\n      return this.$store.state.bigScreen.canvasBgStyle;\n    },\n    cptPaneWidth() {\n      return this.$store.state.bigScreen.componentPaneWidth;\n    },\n    configPaneWidth() {\n      return this.$store.state.bigScreen.configPaneWidth;\n    },\n    designData() {\n      return this.$store.state.bigScreen.bigScreenData;\n    },\n    isShowCoord: {\n      get() {\n        return this.$store.state.bigScreen.isShowCoord;\n      },\n      set(val) {\n        this.$store.dispatch('bigScreen/setCoordShowStatus', val);\n      }\n    },\n    isShowRuler: {\n      get() {\n        return this.$store.state.bigScreen.isShowRuler;\n      },\n      set(val) {\n        this.$store.dispatch('bigScreen/setRuleShowStatus', val);\n      }\n    }\n  },\n  created() {\n    this.appId = this.$route.params.appId;\n    this.bigscreenId = this.$route.params.pageId;\n  },\n  methods: {\n    goBack() {\n      this.$router.go(-1);\n    },\n    // TODO 改为状态管理\n    handleAlign(type) {\n      if (!Object.keys(this.multipleCpts).length) {\n        return;\n      }\n      const posArr = [];\n      if (type === 'top') {\n        let val = 0;\n        for (const key in this.multipleCpts) {\n          if (Object.hasOwnProperty.call(this.multipleCpts, key)) {\n            const el = this.multipleCpts[key];\n            posArr.push(el.cptY);\n          }\n        }\n        val = Math.min(...posArr);\n        Object.values(this.multipleCpts).forEach(_c => {\n          _c.cptY = val;\n        });\n      } else if (type === 'horizontal-center') {\n        /**\n         * 水平居中\n         * Y = selfY + selfHeight / 2\n         * Y 中心到顶部的距离\n         * selfY 自身 y 值\n         * selfHeight 自身高度\n         */\n        let Y = 0;\n        Object.values(this.multipleCpts).forEach((_c, _i) => {\n          const halfHeight = _c.cptHeight / 2;\n          if (_i === 0) {\n            Y = _c.cptY + halfHeight;\n          } else {\n            _c.cptY = Y - halfHeight;\n          }\n        });\n      } else if (type === 'bottom') {\n        for (const key in this.multipleCpts) {\n          if (Object.hasOwnProperty.call(this.multipleCpts, key)) {\n            const el = this.multipleCpts[key];\n            posArr.push({\n              max: el.cptHeight + el.cptY\n            });\n          }\n        }\n        const arr = posArr.map(v => v.max);\n        const max = Math.max(...arr);\n        Object.values(this.multipleCpts).forEach(_c => {\n          _c.cptY = max - _c.cptHeight;\n        });\n      } else if (type === 'left') {\n        let val = 0;\n        for (const key in this.multipleCpts) {\n          if (Object.hasOwnProperty.call(this.multipleCpts, key)) {\n            const el = this.multipleCpts[key];\n            posArr.push(el.cptX);\n          }\n        }\n        val = Math.min(...posArr);\n        Object.values(this.multipleCpts).forEach(_c => {\n          _c.cptX = val;\n        });\n      } else if (type === 'vertical-center') {\n        /**\n         * 垂直居中\n         * X = selfX + selfWidth / 2\n         * X 中心到顶部的距离\n         * selfX 自身 x 值\n         * selfWidth 自身高度\n         */\n        let X = 0;\n        Object.values(this.multipleCpts).forEach((_c, _i) => {\n          const halfWidth = _c.cptWidth / 2;\n          if (_i === 0) {\n            X = _c.cptX + halfWidth;\n          } else {\n            _c.cptX = X - halfWidth;\n          }\n        });\n      } else if (type === 'right') {\n        for (const key in this.multipleCpts) {\n          if (Object.hasOwnProperty.call(this.multipleCpts, key)) {\n            const el = this.multipleCpts[key];\n            posArr.push({\n              height: el.cptWidth,\n              max: el.cptWidth + el.cptX\n            });\n          }\n        }\n        const arr = posArr.map(v => v.max);\n        const max = Math.max(...arr);\n        Object.values(this.multipleCpts).forEach(_c => {\n          _c.cptX = max - _c.cptWidth;\n        });\n      }\n      // 更新存储多选组件的位置的息\n      Object.keys(this.multipleCptPositions).forEach(key => {\n        // eslint-disable-next-line vue/no-mutating-props\n        this.multipleCptPositions[key].cptX = this.multipleCpts[key].cptX;\n        // eslint-disable-next-line vue/no-mutating-props\n        this.multipleCptPositions[key].cptY = this.multipleCpts[key].cptY;\n      });\n    },\n    changeCanvasBgStyle(style) {\n      this.$store.dispatch('bigScreen/changeCanvasBgStyle', style);\n    },\n    // 导出\n    handleExport(command) {\n      if (command === 'img') {\n        // 导出图片\n        html2canvas(this.$store.state.bigScreen.webContainer, {\n          backgroundColor: '#49586e'\n        }).then(canvas => {\n          const canvasData = canvas.toDataURL('image/jpeg');\n          fileDownload(canvasData, this.designData.title + '.png');\n        });\n      } else if (command === 'json') {\n        // 导出json\n        this.$store.dispatch('bigScreen/setBigScreenData', {\n          components: this.cacheComponents\n        });\n        const data = JSON.stringify(this.designData);\n        const uri = 'data:text/csv;charset=utf-8,\\ufeff' + encodeURIComponent(data); // encodeURIComponent解决中文乱码\n        fileDownload(uri, this.designData.title + '.json');\n      }\n    },\n    outBlur() {\n      // 取消聚焦组件\n      this.$store.dispatch('bigScreen/setCurComponentIndex', -1);\n      this.$store.dispatch('bigScreen/setCurComponent', {});\n      this.$emit('clearMultipleCpts');\n    },\n    // 隐藏设置面板\n    hiddenPane(type) {\n      this.$store.dispatch('bigScreen/changePaneDisplayStatus', type);\n    },\n    importDesign() {\n      this.$refs.refFile.dispatchEvent(new MouseEvent('click'));\n    },\n    fileLoad() {\n      const that = this;\n      // 选择导入的文件\n      const importedFile = this.$refs.refFile.files[0];\n      if (!importedFile) {\n        return this.$message.info('文件上传失败，请检查后重试');\n      }\n      // 文件名字\n      const fileName = importedFile.name;\n      // 文件阅读器\n      const reader = new FileReader();\n      // 读取文件内容\n      reader.readAsText(importedFile);\n      // 文件加载\n      reader.onload = function () {\n        // todo 文件合法性校验待完善\n        const fileJson = JSON.parse(reader.result);\n        fileJson.id = that.designData.id;\n        that.$store.dispatch('bigScreen/initBigScreenData', fileJson);\n        that.$store.dispatch('bigScreen/initComponentList', fileJson.components);\n        // 清空现有大屏组件列表\n        // that.$store.dispatch('bigScreen/setBigScreenData', { components: [] })\n        that.$message.success(`文件 ${fileName} 导入成功!`);\n      };\n      // 读取错误\n      reader.onerror = function () {\n        that.$message.success(`文件 ${fileName} 读取失败，请检查后重试`);\n      };\n      this.$refs.refFile.value = '';\n    },\n    // 保存数据\n    saveDesignData() {\n      const cacheData = Base64.encode(JSON.stringify(this.designData));\n      localStorage.setItem('viewData', cacheData);\n      // this.designData.components.map((c) => {\n      //   // ? 兼容旧版本大屏数据没有动画参数的\n      //   if (!c.configProps.animation) {\n      //     c.configProps.animation = {\n      //       name: '',\n      //       delay: 'animate__delay-0s',\n      //       speed: 'animate__slow',\n      //       repeat: 'animate__repeat-1'\n      //     }\n      //   }\n      // })\n      // this.$modal.loading('保存中，请稍后...')\n      // 保存大屏数据\n      // BigscreenApi.saveBigscreen(bc)\n      //   .then((res) => {\n      //     this.$modal.closeLoading()\n      //     if (res.code === 200) {\n      //       this.$message.success('保存成功！');\n      //     } else {\n      //       this.$message.info(res.msg)\n      //     }\n      //   })\n      //   .catch((err) => {\n      //     this.$modal.closeLoading()\n      //     console.log(err)\n      //   });\n      // const that = this\n      // 生成缩略图\n      // html2canvas(that.$store.state.bigScreen.webContainer, {\n      //   backgroundColor: '#49586e'\n      // }).then((canvas) => {\n      //   const canvasData = canvas.toDataURL('image/jpeg')\n      //   const file = base64toFile(canvasData, that.designData.title + '.png')\n      //   const fileFormData = new FormData()\n      //   fileFormData.append('file', file)\n      //   // todo 上传缩略图\n      //   // uploadThumbnail(that.designData.id + '.png', fileFormData).then(\n      //   //   (res) => {\n      //   //   // 上传预览图\n      //   //     that.$store.dispatch('bigScreen/setBigScreenData', { designImgPath: res.data })\n      //   //     that.$store.dispatch('bigScreen/setBigScreenData', { components: JSON.stringify(this.cacheComponents) })\n      //   //     // todo 接入后端保存api 保存 designData\n      //   //   }\n      //   // )\n      //   this.$modal.closeLoading()\n      // })\n    },\n\n    // 预览画布\n    preview() {\n      if (!this.cacheComponents.length) {\n        this.$message.closeAll();\n        return this.$modal.msg('暂无组件可预览，请先设计看板');\n      }\n      if (!this.cacheComponents.some(c => {\n        return !c.hidden;\n      })) {\n        this.$message.closeAll();\n        return this.$modal.msg('画布中暂无可见组件，请调整后重试');\n      }\n      // 预览页面数据存储到本地，减少不必要的网络请求，通过标识 mode 是否等于 preview 判断是否为预览模式\n      localStorage.setItem('designCache', Base64.encode(JSON.stringify(this.designData)));\n      // 生成预览链接\n      const routeUrl = this.$router.resolve({\n        name: 'PreviewBigscreen',\n        params: {\n          // pageId: this.bigscreenId\n        },\n        query: {\n          mode: 'preview'\n        }\n      });\n      // 打开预览窗口\n      window.open(routeUrl.href, '_blank');\n    },\n    // 清空画布\n    clearDesign() {\n      this.$confirm('此操作将会清空画布，是否继续？', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning',\n        customClass: 'big-screen-confirm-dialog'\n      }).then(() => {\n        // 可考虑优化为一个方法\n        this.$store.dispatch('bigScreen/clearCanvas');\n        this.$store.dispatch('bigScreen/setBigScreenData', {\n          components: []\n        });\n        this.$store.dispatch('bigScreen/setCurComponent', {});\n        localStorage.removeItem('designCache');\n        clearCptInterval(null, true);\n        this.$message.success('画布已清除');\n      }).catch(() => {\n        console.log('取消清空');\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}