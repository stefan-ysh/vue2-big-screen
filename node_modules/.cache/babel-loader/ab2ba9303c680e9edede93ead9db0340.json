{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getDataJson, pollingRefresh } from '@/utils';\nexport default {\n  name: 'ScrollTable2',\n  props: {\n    cptId: {\n      type: String,\n      default: ''\n    },\n    configProps: {\n      type: Object,\n      default: () => {}\n    },\n    // eslint-disable-next-line vue/require-default-prop\n    width: Number,\n    // eslint-disable-next-line vue/require-default-prop\n    height: Number,\n    show: Boolean\n  },\n  data() {\n    return {\n      // todo 文件上传url\n      uploadUrl: 'example/upload',\n      colWidths: {},\n      rowHeight: 10,\n      tableData: [],\n      rollData: [],\n      cptData: '',\n      uuid: null,\n      timer: null\n    };\n  },\n  computed: {\n    showLine() {\n      if (this.tableData.length <= this.configProps.attribute.showLine) {\n        return this.tableData.length;\n      } else {\n        return this.configProps.attribute.showLine;\n      }\n    },\n    interval() {\n      return this.configProps.attribute.interval;\n    }\n  },\n  watch: {\n    showLine: {\n      handler() {\n        this.computeRowHeight();\n        this.scrollTable();\n      },\n      deep: true // 深度监听\n    },\n\n    interval: {\n      handler() {\n        this.scrollTable();\n      },\n      deep: true // 深度监听\n    },\n\n    width() {\n      this.computeColWidth();\n    },\n    height() {\n      this.computeRowHeight();\n    },\n    show(val) {\n      if (val) {\n        this.computeColWidth();\n      }\n    }\n  },\n  created() {\n    this.uuid = require('uuid').v1();\n    this.refreshCptData();\n  },\n  mounted() {\n    this.computeColWidth();\n    this.computeRowHeight();\n  },\n  beforeDestroy() {\n    clearInterval(this.timer);\n  },\n  methods: {\n    computeRowHeight() {\n      if (!this.configProps.attribute.thead) {\n        this.rowHeight = this.height / this.showLine;\n      } else {\n        this.rowHeight = (this.height - this.configProps.attribute.theadHeight) / this.showLine;\n      }\n    },\n    computeColWidth() {\n      const that = this;\n      that.colWidths = {};\n      this.configProps.attribute.columns.forEach(item => {\n        this.$nextTick(() => {\n          that.colWidths[item.colKey] = that.$refs[item.colKey][0].clientWidth;\n        });\n      });\n    },\n    refreshCptData() {\n      pollingRefresh(this.uuid, this.configProps.cptDataForm, this.loadData);\n    },\n    loadData() {\n      getDataJson(this.configProps.cptDataForm, this.cptId).then(res => {\n        const parse = res;\n        for (let i = 0; i < parse.length; i++) {\n          parse[i].rowNum = i;\n        }\n        this.tableData = parse;\n        this.scrollTable();\n      });\n    },\n    scrollTable() {\n      const that = this;\n      if (this.timer) {\n        clearInterval(this.timer);\n      }\n      that.rollData = that.tableData.slice(0, this.showLine);\n      if (this.showLine >= that.tableData.length) {\n        return;\n      }\n      let i = this.showLine;\n      this.timer = setInterval(() => {\n        that.rollData.shift();\n        that.rollData.push(that.tableData[i]);\n        i++;\n        if (i >= that.tableData.length) {\n          i = 0;\n        }\n      }, this.interval * 1000);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}